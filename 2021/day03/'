use std::io::{self, Read};

type EmptyResult = Result<(), Box<dyn std::error::Error>>;

fn main() -> EmptyResult {
    let mut input = String::new();
    io::stdin().read_to_string(&mut input)?;

    part1(&input)?;
    part2(&input)?;

    Ok(())
}

fn get_bits(input: &String) -> (u32, Vec<u32>) {
    let mut bits: Vec<u32> = Vec::new();
    let mut linecount: u32 = 0;

    // get bit counts
    for line in input.lines() {
        for (i, char) in line.chars().enumerate() {
            if char != '1' {
                continue;
            }

            if bits.len() <= i {
                bits.push(1);
            } else {
                bits[i] += 1;
            }
        }

        linecount += 1;
    }

    (linecount, bits)
}

fn part1(input: &String) -> EmptyResult {
    let (linecount, bits) = get_bits(&input);

    // calculate gamma and epsilon
    let mut gamma: u32 = 0;
    let mut epsilon: u32 = 0;
    for (i, count) in bits.iter().enumerate() {
        let shift: usize = bits.len() - i - 1;
        if count > &(linecount - count) {
            gamma |= 1 << shift;
        } else {
            epsilon |= 1 << shift;
        }
    }

    println!("Combined power value: {}", gamma * epsilon);
    Ok(())
}

fn part2(input: &String) -> EmptyResult {
    let (linecount, bits) = get_bits(&input);

    // calculate ratings
    let mut o2_ratings: Vec<&str> = input.lines().collect();
    let mut co_ratings: Vec<&str> = input.lines().collect();

    let mut remove: Vec<usize> = Vec::new();

    let oxygen: u32 = 0;
    let carbon: u32 = 0;

    // oxygen
    for (i, bitcount) in bits.iter().enumerate() {
        let common = bitcount >= &(linecount / 2);
        let c = if common { '1' } else { '0' };

        for (j, rating) in o2_ratings.iter().enumerate() {
            if rating.chars().nth(i) != Some(c) {
                remove.push(j);
            }
        }

        for r in remove.iter().rev() {
            o2_ratings.remove(*r);
        }

        remove.clear();
        if o2_ratings.len() == 1 {
            let oxygen = o2_ratings.first().expect("unreachable").parse::<u32>()?;
            break;
        }
    }

    println!("Oxygen: {}", oxygen);
    Ok(())
}
